{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto de Constru\u00e7\u00e3o de Containers Docker","text":""},{"location":"#integrante","title":"Integrante","text":"<ul> <li>Pedro De Lucca </li> <li>Github </li> <li>Linkedin</li> </ul> <p>Bem-vindo ao projeto de constru\u00e7\u00e3o de containers Docker! Este projeto visa demonstrar como configurar containers Docker tanto em ambiente local quanto na AWS. </p>"},{"location":"#containers-docker-localmente","title":"Containers Docker Localmente","text":"<p>Este guia ir\u00e1 ajud\u00e1-lo a configurar e executar containers Docker localmente em sua m\u00e1quina. Aprenda como configurar seu ambiente de desenvolvimento local, criar e executar containers.</p> <p>Docker Local</p>"},{"location":"#containers-docker-na-aws","title":"Containers Docker na AWS","text":"<p>Aqui voc\u00ea encontrar\u00e1 um passo a passo para configurar containers Docker na AWS, utilizando servi\u00e7os como EC2 e Kubernetes. Aprenda como deployar suas aplica\u00e7\u00f5es na nuvem utilizando Docker.</p> <p>Docker na AWS</p>"},{"location":"#por-que-usar-docker","title":"Por que usar Docker?","text":"<ul> <li>Isolamento: Cada aplica\u00e7\u00e3o \u00e9 executada em um container isolado, evitando conflitos de depend\u00eancias.</li> <li>Portabilidade: Um container criado em sua m\u00e1quina local pode ser executado na AWS sem modifica\u00e7\u00f5es.</li> <li>Consist\u00eancia: Evita problemas de incompatibilidade de ambiente entre desenvolvimento e produ\u00e7\u00e3o.</li> <li>Escalabilidade: Facilita o uso de infraestruturas de nuvem para escalar suas aplica\u00e7\u00f5es conforme necess\u00e1rio.</li> </ul>"},{"location":"aws_index/","title":"Deploy na AWS","text":""},{"location":"aws_index/#exemplo-da-aplicacao","title":"Exemplo da aplica\u00e7\u00e3o:","text":"<p>A aplica\u00e7\u00e3o est\u00e1 dispon\u00edvel no seguinte link: Api App</p> <p>Aviso</p> <p>A aplica\u00e7\u00e3o est\u00e1 hospedada em um ambiente de teste e pode ser desativada a qualquer momento.</p> <p>Instru\u00e7\u00f5es</p> <p>Siga o passo a passo aqui para saber como utilizar a aplica\u00e7\u00e3o.</p>"},{"location":"aws_index/#pre-requisitos","title":"Pr\u00e9-requisitos:","text":"<ul> <li>Conta na AWS</li> <li>AWS CLI</li> <li>EKSCTL</li> </ul> Realizar o deploy por meio do CLI local <p>Caso voc\u00ea n\u00e3o tenha o AWS CLI e o EKSCTL instalados na sua m\u00e1quina, siga os passos abaixo: Caso n\u00e3o tenha o AWS CLI instalado, siga o passo a passo aqui.</p> <p>Caso voc\u00ea n\u00e3o tenha o EKSCTL instalado, siga o passo a passo aqui.</p> Realizar o deploy por meio do CloudShell <p>Para realizar o deploy por meio do CloudShell, acesse o console da AWS e procure por <code>CloudShell</code> no canto superior direito. Caso queira saber mais sobre o AWS CloudShell acesse.</p> <p>Instale o EKSCTL. Sabemos que o CloudShell roda uma vers\u00e3o do Linux, ent\u00e3o siga o passo a passo para instalar o EKSCTL em base Unix. Ap\u00f3s isso, siga as instru\u00e7\u00f5es para deploy abaixo.</p> Dica Amiga <p>Utilize o CloudShell para realizar o deploy, pois ele \u00e9 mais simples de instalar os pacotes.</p>"},{"location":"aws_index/#passo-a-passo-para-o-deploy","title":"Passo a passo para o deploy:","text":"<p>Para realizar o deploy da aplica\u00e7\u00e3o na AWS, siga os passos abaixo:</p> <ol> <li> <p>Criar cluster EKS: <pre><code>eksctl create cluster --name cloud-project-cluster --region us-east-2 --nodes 2\n</code></pre></p> <ul> <li><code>--name</code> \u00e9 o nome do cluster a ser criado.</li> <li><code>--region</code> \u00e9 a regi\u00e3o onde o cluster ser\u00e1 criado, no nosso caso, us-east-2 (Ohio).</li> <li><code>--nodes</code> \u00e9 a quantidade de n\u00f3s que o cluster ter\u00e1, 2 pois \u00e9 como o mestre mandou.</li> </ul> </li> <li> <p>Configurar o kubectl: <pre><code>aws eks --region us-east-2 update-kubeconfig --name cloud-project-cluster\n</code></pre></p> <ul> <li><code>--region</code> \u00e9 a regi\u00e3o onde o cluster foi criado.</li> <li><code>--update kubeconfig</code> \u00e9 o comando para atualizar o arquivo de configura\u00e7\u00e3o do kubectl.</li> <li><code>--name</code> \u00e9 o nome do cluster criado.</li> </ul> </li> <li> <p>Criar arquivo app <code>app-deployment.yml</code>: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fastapi-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: fastapi\n  template:\n    metadata:\n      labels:\n        app: fastapi\n    spec:\n      containers:\n        - name: fastapi\n          image: pedrodl/cloud_project1:latest\n          ports:\n            - containerPort: 8000\n          env:\n            - name: DATABASE_URL\n              value: \"postgresql://postgres:postgres@postgres:5432/ProjetoCloud\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: fastapi-service\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8000\n  selector:\n    app: fastapi\n</code></pre></p> <ul> <li>Fa\u00e7a as devidas modifica\u00e7\u00f5es caso julgue necess\u00e1rio, contudo, o arquivo acima j\u00e1 est\u00e1 configurado para a aplica\u00e7\u00e3o. A \u00fanica modifica\u00e7\u00e3o obrigat\u00f3ria \u00e9 a vari\u00e1vel <code>image</code> que deve ser alterada para a sua imagem do Docker Hub.</li> </ul> </li> <li> <p>Criar arquivo db <code>db-deployment.yml</code>: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-db-cloud\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres\n          ports:\n            - containerPort: 5432\n          env:\n            - name: POSTGRES_USER\n              value: \"postgres\"\n            - name: POSTGRES_PASSWORD\n              value: \"postgres\"\n            - name: POSTGRES_DB\n              value: \"ProjetoCloud\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n    - port: 5432\n  selector:\n    app: postgres\n</code></pre></p> </li> <li> <p>Aplicar os arquivos no cluster (rode os comandos abaixo na pasta onde os arquivos <code>.yml</code> est\u00e3o): <pre><code>kubectl apply -f app-deployment.yml\nkubectl apply -f db-deployment.yml\n</code></pre></p> </li> <li> <p>Acessar a aplica\u00e7\u00e3o: <pre><code>kubectl get svc fastapi-service\n</code></pre></p> </li> </ol>"},{"location":"aws_index/#video-demonstrativo","title":"V\u00eddeo demonstrativo","text":""},{"location":"local_index/","title":"API REST com FastAPI e PostgreSQL","text":""},{"location":"local_index/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Esta API permite que os usu\u00e1rios realizem o registro, login e consultem dados sobre a probabilidade de origem de um nome, indicando qual pa\u00eds a pessoa pode ter nascido com base no nome fornecido. A API \u00e9 constru\u00edda usando FastAPI e PostgreSQL, e \u00e9 executada em containers Docker.</p>"},{"location":"local_index/#tecnologias","title":"Tecnologias","text":"<ul> <li>FastAPI</li> <li>PostgreSQL</li> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"local_index/#links-uteis","title":"Links \u00fateis","text":"<ul> <li>Reposit\u00f3rio no Docker Hub</li> <li>Reposit\u00f3rio no Github</li> </ul>"},{"location":"local_index/#endpoints","title":"Endpoints","text":"<ul> <li>POST /register: Registra um novo usu\u00e1rio</li> <li>POST /login: Realiza o login do usu\u00e1rio</li> <li>GET /consultar: Retorna a probabilidade de origem de um nome</li> </ul>"},{"location":"local_index/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Baixe o arquivo <code>compose.yml</code>:</p> <p>Compose.yml</p>"},{"location":"local_index/#como-usar","title":"Como usar","text":"<ol> <li> <p>Rodar o container:</p> <p>Dentro da pasta onde o arquivo <code>compose.yml</code> foi baixado, execute o comando abaixo: <pre><code>docker compose up\n</code></pre></p> </li> <li> <p>Acesse a documenta\u00e7\u00e3o da API em:</p> <p>Voc\u00ea ir\u00e1 utilizar o Swagger (nativo do FastAPI) para testar a API. Para isso, siga os passos abaixo: <pre><code>http://localhost:8000\n</code></pre></p> </li> <li> <p>Crie um novo usu\u00e1rio acessando o endpoint POST /register e informando os dados necess\u00e1rios;</p> <p>Para essa etapa voc\u00ea precisa informar os seguintes dados no formato JSON: <pre><code>{\n    \"nome\": \"seu_nome\",\n    \"email\": \"seu_email\",\n    \"senha\": \"sua_senha\"\n}\n</code></pre> Se o usu\u00e1rio for criado com sucesso, voc\u00ea receber\u00e1 uma mensagem de confirma\u00e7\u00e3o com um token JWT no seguinte formato: <pre><code>{\n    \"jwt\": \"seu_token\"\n}\n</code></pre> Copie o token gerado</p> </li> <li> <p>(Opcional caso voc\u00ea tenha acabado de realizar o cadastro) Acesse o endpoint POST /login e informe o email e senha cadastrados no passo anterior;</p> <p>Para essa etapa voc\u00ea precisa informar os seguintes dados no formato JSON: <pre><code>{\n    \"email\": \"seu_email\",\n    \"senha\": \"sua_senha\"\n}\n</code></pre> Se o login for realizado com sucesso, voc\u00ea receber\u00e1 uma mensagem de confirma\u00e7\u00e3o com um token JWT no seguinte formato: <pre><code>{\n    \"jwt\": \"seu_token\"\n}\n</code></pre> Copie o token gerado</p> </li> <li> <p>Acesse o endpoint GET /consultar e informe o nome que deseja consultar a origem;</p> <p>Para essa etapa voc\u00ea precisa informar o nome que deseja consultar e o token JWT gerado no passo anterior;</p> <p>Para adicionar o token JWT, clique no cadeado onde est\u00e1 escrito Authorize no canto superior direito da p\u00e1gina do Swagger e cole o token no campo \"Value\" e clique em \"Authorize\";</p> <p>Em seguida, informe o nome que deseja consultar no campo \"nome\" e clique em \"Execute\";</p> <p>Exemplo: Para o nome Ventura voc\u00ea receber\u00e1 a seguinte resposta: <pre><code>{\n\"count\": 93808,\n\"name\": \"Ventura\",\n\"country\": [\n    {\n    \"country_id\": \"Guatemala\",\n    \"probability\": 0.0778645843473412\n    },\n    {\n    \"country_id\": \"Dominican Republic\",\n    \"probability\": 0.06733259445061568\n    },\n    {\n    \"country_id\": \"Portugal\",\n    \"probability\": 0.06602045473537535\n    },\n    {\n    \"country_id\": \"El Salvador\",\n    \"probability\": 0.04476210258091573\n    },\n    {\n    \"country_id\": \"United States\",\n    \"probability\": 0.04369474023158603\n    }\n]\n}\n</code></pre> <p>Info</p> <p>Caso voc\u00ea realize a requisi\u00e7\u00e3o sem informar um nome, a API retornar\u00e1 informa\u00e7\u00f5es sobre um nome aleat\u00f3rio.</p> <li> <p>Para finalizar, execute o comando abaixo (em outro terminal) para parar os containers::     <pre><code>docker compose down\n</code></pre></p> </li> <p>Tip</p> <p>O token JWT gerado \u00e9 v\u00e1lido por 30 minutos. Ap\u00f3s esse tempo, voc\u00ea precisar\u00e1 realizar o login novamente para obter um novo token.</p>"},{"location":"local_index/#video-demonstrativo","title":"V\u00eddeo demonstrativo","text":""},{"location":"local_index/#referencias","title":"Refer\u00eancias","text":"<ul> <li>FastAPI</li> <li>PostgreSQL</li> <li>Docker</li> <li>Docker Compose</li> <li>Swagger</li> </ul>"},{"location":"local_tech/","title":"T\u00e9cnicas utilizadas para cria\u00e7\u00e3o do container Docker","text":""},{"location":"local_tech/#geracao-do-container","title":"Gera\u00e7\u00e3o do container","text":"<p>Para a gera\u00e7\u00e3o do container Docker, foi utilizado o arquivo Dockerfile, que cont\u00e9m as instru\u00e7\u00f5es necess\u00e1rias para a cria\u00e7\u00e3o da imagem e o arquivo compose.yml, que cont\u00e9m as configura\u00e7\u00f5es necess\u00e1rias para a execu\u00e7\u00e3o do container.</p> <p>Warning</p> <p>Os arquivos Dockerfile e compose.yml devem estar presentes na raiz do projeto. Neste caso, est\u00e1 presente na pasta <code>app</code>. Execute o comando <code>cd app</code> para acessar a pasta do projeto.</p> <p>Exemplo do <code>Dockerfile:</code></p> <pre><code># Usar a imagem oficial do Python como base\nFROM python:3.10-slim\n\n# Definir o diret\u00f3rio de trabalho dentro do container\nWORKDIR /app\n\n# Copiar o arquivo requirements.txt para instalar as depend\u00eancias\nCOPY requirements.txt .\n\n# Instalar as depend\u00eancias necess\u00e1rias\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copiar todo o conte\u00fado da aplica\u00e7\u00e3o para o diret\u00f3rio de trabalho\nCOPY . .\n\n# Expor a porta onde a aplica\u00e7\u00e3o estar\u00e1 rodando\nEXPOSE 8000\n\n# Comando para iniciar a aplica\u00e7\u00e3o FastAPI usando o Uvicorn\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>Exemplo do <code>compose.yml:</code></p> <pre><code>name: cloud_project1\n\nservices:\n  app:\n    image: pedrodl/cloud_project1:latest\n    container_name: fast_api_cloud\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ProjetoCloud\n    depends_on:\n      - db\n\n  db:\n    image: postgres\n    container_name: postgres_db_cloud\n    environment:\n      - POSTGRES_USER=${POSTGRES_USER:-postgres}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}\n      - POSTGRES_DB=${POSTGRES_DB:-ProjetoCloud}\n    # Expondo na porta 5430 para n\u00e3o conflitar com o postgres local\n    ports:\n      - \"5430:5432\"\n</code></pre>"},{"location":"local_tech/#builds-da-imagem","title":"Builds da imagem","text":""},{"location":"local_tech/#build-da-imagem-padrao","title":"Build da imagem padr\u00e3o","text":"<p>Para construir a imagem Docker, \u00e9 necess\u00e1rio executar o comando <code>docker build -t &lt;nome_da_imagem&gt; .</code> no terminal, dentro da pasta <code>app</code> do projeto. O comando <code>docker build</code> cria a imagem Docker com base no Dockerfile presente no diret\u00f3rio atual e o par\u00e2metro <code>-t</code> define o nome da imagem.</p> <p>Exemplo de constru\u00e7\u00e3o da imagem Docker:</p> <pre><code>docker build -t pedrodl/cloud_project1:latest .\n</code></pre>"},{"location":"local_tech/#build-da-imagem-em-ambas-as-arquiteturas-x86-e-arm","title":"Build da imagem em ambas as arquiteturas (x86 e ARM)","text":"<p>Para construir a imagem Docker em ambas as arquiteturas (x86 e ARM), \u00e9 necess\u00e1rio utilizar o comando <code>docker buildx build --platform linux/amd64,linux/arm64 -t &lt;nome_da_imagem&gt; .</code> no terminal, dentro da pasta <code>app</code> do projeto. O comando <code>docker buildx build</code> cria a imagem Docker com base no Dockerfile presente no diret\u00f3rio atual e o par\u00e2metro <code>--platform</code> define as arquiteturas em que a imagem ser\u00e1 constru\u00edda.</p> <p>Exemplo de constru\u00e7\u00e3o da imagem Docker em ambas as arquiteturas:</p> <pre><code># Ativar o buildx\ndocker buildx create --use\n\n# Resetar o buildx\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n# Construir a imagem em ambas as arquiteturas e enviar para o Docker Hub\ndocker buildx build --platform linux/amd64,linux/arm64 -t pedrodl/cloud_project1:latest . --push\n</code></pre>"},{"location":"local_tech/#publicacao-da-imagem-no-docker-hub","title":"Publica\u00e7\u00e3o da imagem no Docker Hub","text":"<p>Para publicar a imagem no Docker Hub, \u00e9 necess\u00e1rio criar uma conta no site Docker Hub. Ap\u00f3s criar a conta, \u00e9 necess\u00e1rio logar no terminal com o comando <code>docker login</code>. Ap\u00f3s isso, \u00e9 poss\u00edvel publicar a imagem com o comando <code>docker push &lt;nome_usuario&gt;/&lt;nome_da_imagem&gt;:[TAG]</code>.</p> <p>Exemplo de publica\u00e7\u00e3o da imagem no Docker Hub:</p> <pre><code>docker push pedrodl/cloud_project1:latest\n</code></pre>"},{"location":"local_tech/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Docker</li> <li>Docker Multi-Architecture Builds</li> </ul>"}]}